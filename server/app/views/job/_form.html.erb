<p>Use <code>{P}</code> as a payload marker</p>

<div class="row">
  <%= form_for(@job, :html => {class: 'col-lg-6 create-form'}) do |f| %>

  <label for="description">Job Description</label>
  <%= f.text_area :description, {:class => 'input-field', :size => '50x6'} %>

  <label for="node_limit">Node Allocation Limit (0 for no limit)</label>
  <%= f.text_field :node_limit, {:class => 'input-field' } %>

  <label for="method">HTTP Method</label>
  <%= f.select("http_method", options_for_select([['GET', 'GET'], ['POST', 'POST'], ["PUT", "PUT"], ["PATCH", "PATCH"], ["DELETE", "DELETE"]], @job.http_method)) %>

  <label for="uri">HTTP URI</label>
  <%= f.text_field :http_uri, {:class => 'input-field' } %>

  <label for="header">HTTP Headers</label>
  <%= f.text_area :http_headers, {:class => 'input-field', :size => '50x6'} %>

  <label for="data">HTTP Post Data</label>
  <%= f.text_area :http_data, {:class => 'input-field', :size => '50x6'} %>

  <label for="response">Response Storage?</label>
  <%= f.select(:attack_mode, options_for_select([['None', 'none'], ['Store Full', 'store']], @job.attack_mode)) %>

  <label for="response">Response Matching</label>
  <fieldset id="response_flags">
  <% @job.response_flag_meta.each do |rfm| %>
    <input type="hidden" name="job[response_flag_meta][<%= rfm.id %>][id]" value="<%= rfm.id %>">
    <input class="input-field" type="text" name="job[response_flag_meta][<%= rfm.id %>][match_value]" value="<%= rfm.match_value %>" class="inline">

    <select name="job[response_flag_meta][<%= rfm.id %>][match_type]" class="inline">
      <option value="string" <%= "SELECTED" if rfm.match_type == "string" %>>String</option>
      <option value="regex" <%= "SELECTED" if rfm.match_type == "regex" %>>Regex</option>
    </select><br />
  <% end %>
  </fieldset>

  <input type="button" id="addNewFlag" value="Add Flag">

  <label for="type">Attack Type</label>
  <%= f.select(:attack_type, options_for_select([['Repeat', 'repeat'], ['Dictionary', 'dictionary'], ['Brute Force', 'bruteforce']], @job.attack_type)) %>

  <div id="dictionary" <%= @job.attack_type != "dictionary" ? "class='hidden'" : "" %>>
    <label for="dictionary">Dictionary</label>
    <%=
    select("job", "dictionary_id", @dictionaries.all.collect {|d| [ d.original_filename, d.id ] }, {prompt: 'Select Dictionary'})
    %>
  </div>

  <div id="charset" <%= @job.attack_type != "bruteforce" ? "class='hidden'" : "" %>>
    <label for="charset">Character Set</label>
    <%= f.text_field :charset, {:class => 'input-field'} %>
  </div>

  <label for="status">Job Status</label>
  <%= f.select(:status, options_for_select([['Start', 'active'], ['Pending', 'pending']], @job.status)) %>


  <%= submit_tag "Submit", class: 'button-primary' %>
  <%= button_to "Cancel", jobs_path, class: 'button-alternative' %>
  <% end %>
</div>